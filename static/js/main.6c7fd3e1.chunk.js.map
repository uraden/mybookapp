{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","id","book_name","author","published_year","editing","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAiFeA,MA9Ef,WACE,IADa,EAUaC,mBATT,CACf,CAAEC,GAAI,EAAGC,UAAW,iBAAkBC,OAAQ,mBAAoBC,eAAgB,MAClF,CAAEH,GAAI,EAAGC,UAAW,gBAAiBC,OAAQ,cAAeC,eAAgB,MAC5E,CAAEH,GAAI,EAAGC,UAAW,eAAgBC,OAAQ,kBAAmBC,eAAgB,QAJpE,gCA2BiBJ,oBAAS,IA3B1B,mBA2BNK,EA3BM,aA8ByBL,mBAFb,CAAEC,GAAI,KAAMC,UAAW,GAAIC,OAAQ,GAAIC,eAAgB,MA5BnE,mBA8Cb,OA9Ca,UA+CX,sBAAKE,UAAU,MAAf,UACA,qDACA,sBAAKA,UAAU,WAAf,UAEE,qBAAKA,UAAU,aAAf,SACGD,EACC,8BACE,6CAQA,8BACE,8CAMR,qBAAKC,UAAU,sBC5DNC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6c7fd3e1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react/cjs/react.development';\nimport './App.css';\n\nfunction App() {\n  const bookData = [\n    { id: 1, book_name: \"Lord of Rings \", author: \"J. R. R. Tolkien\", published_year: 1954 },\n    { id: 2, book_name: \"Anna Karenina\", author: \"Leo Tolstoy\", published_year: 1878 },\n    { id: 3, book_name: \"Kite Runner \", author: \"Khaled Hosseini\", published_year: 2003 },\n     \n  ]\n\n\n\n  const [books, setBooks] = useState(bookData)\n\n\n\n\n  const addBook = (book) => {\n    book.id = books.length + 1\n    setBooks([...books, book])\n  }\n\n\n  //deleting the book \n\n  const deleteBook = (id) => {\n    setBooks(books.filter((book) => book.id !== id))\n  }\n\n  const [editing, setEditing] = useState(false)\n  const initialFormState = { id: null, book_name: '', author: '', published_year: '' }\n\n  const [currentBook, setCurrentBook] = useState(initialFormState)\n\n  const editRow = (book) => {\n    setEditing(true)\n\n    setCurrentBook({ id: book.id, book_name: book.book_name, author: book.author, published_year: book.published_year })\n  }\n\n  const updateBook = (id, updatedBook) => {\n    setEditing(false)\n\n    setBooks(books.map((book) => (book.id === id ? updatedBook : book)))\n  }\n\n\n\n  return (\n    <div className=\"App\">\n    <h1>CRUD App with Hooks</h1>\n    <div className=\"flex-row\">\n\n      <div className=\"flex-large\">\n        {editing ? (\n          <div>\n            <h2>Edit book</h2>\n          {/*  <EditBookForm\n              setEditing={setEditing}\n              currentBook={currentBook}\n              updateBook={updateBook}\n            /> */} \n          </div>\n        ) : (\n            <div>\n              <h2>Add book</h2>\n            {/*  <AddBookForm addBook={addBook} />*/} \n            </div>\n          )}\n      </div>\n\n      <div className=\"flex-large\">\n       \n        {/* <BookTable books={books} editRow={editRow} deleteBook={deleteBook} /> */} \n      </div>\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}